pip install pandas numpy matplotlib seaborn

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load the Iris dataset from the seaborn library
iris = sns.load_dataset("iris")

# Print the first five rows of the dataset
print(iris.head())

# Print the summary statistics of the dataset
print(iris.describe())

# Check for missing values in the dataset
print(iris.isnull().sum())

# Plot a histogram of the sepal length
plt.hist(iris["sepal_length"])
plt.title("Histogram of Sepal Length")
plt.xlabel("Sepal Length (cm)")
plt.ylabel("Frequency")
plt.show()

# Plot a box plot of the sepal length by species
sns.boxplot(x="species", y="sepal_length", data=iris)
plt.title("Box Plot of Sepal Length by Species")
plt.xlabel("Species")
plt.ylabel("Sepal Length (cm)")
plt.show()

# Plot a scatter plot of the sepal length vs. sepal width
plt.scatter(iris["sepal_length"], iris["sepal_width"])
plt.title("Scatter Plot of Sepal Length vs. Sepal Width")
plt.xlabel("Sepal Length (cm)")
plt.ylabel("Sepal Width (cm)")
plt.show()

# Calculate the correlation matrix of the dataset
corr = iris.corr()

# Plot a heatmap of the correlation matrix
sns.heatmap(corr, annot=True, cmap="coolwarm")
plt.title("Heatmap of Correlation Matrix")
plt.show()

# Perform a principal component analysis (PCA) on the dataset
from sklearn.decomposition import PCA

pca = PCA(n_components=2)
pca_result = pca.fit_transform(iris[["sepal_length", "sepal_width", "petal_length", "petal_width"]])

# Plot the PCA results
plt.scatter(pca_result[:, 0], pca_result[:, 1], c=iris["species"])
plt.title("PCA Results")
plt.xlabel("PCA 1")
plt.ylabel("PCA 2")
plt.show()

# Train a logistic regression model on the dataset
from sklearn.linear_model import LogisticRegression

X = iris[["sepal_length", "sepal_width", "petal_length", "petal_width"]]
y = iris["species"]

model = LogisticRegression()
model.fit(X, y)

# Print the accuracy of the model
print("Accuracy:", model.score(X, y))

# Print the coefficients of the model
print("Coefficients:", model.coef_)

# Print the intercept of the model
print("Intercept:", model.intercept_)

# Predict the species of a new flower
new_flower = np.array([[5.0, 3.0, 1.5, 0.2]])
prediction = model.predict(new_flower)
print("Prediction:", prediction)
